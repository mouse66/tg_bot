from aiogram import Dispatcher, types

import database
from bin.admins import send_admins, send_admins_doc
from bin.payments.payments import check_payment
from bin.strings import get_buy_message, get_cheque_num, get_now_date, get_user_link
from loader import bot
from src import config
from src.config import DIR
from src.const import const_ru


async def register_purchase(message: types.Message, data):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–∫—É–ø–∫–∏

    :param message:
    :param data:
    :return:
    """
    has_payment = check_payment(data, message.chat.id)

    item_id = data['item_id']
    amount = int(data['amount'])
    count = data['count']

    item_info = database.get_item(item_id)
    user_info = database.get_user(message.chat.id)

    if has_payment:
        # –æ–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
        state = Dispatcher.get_current().current_state()
        await state.finish()
        await message.delete()

        items_data = database.get_item_data(item_id, count, True)

        # –≤—Å—è –∏–Ω—Ñ–∞ –æ –ø–æ–∫—É–ø–∫–µ
        purchase_data = dict()
        purchase_data['user_id'] = message.chat.id
        purchase_data['item_name'] = item_info[1]
        purchase_data['amount'] = amount
        purchase_data['count'] = count
        purchase_data['date'] = get_now_date()
        purchase_data['cheque'] = get_cheque_num()
        purchase_data['payment_type'] = const_ru[data['payment']]

        # –∑–∞–ø–∏—Å—å –ø–æ–∫—É–ø–∫–∏ –≤ –ë–î –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ ID
        sale_id = database.add_buy(purchase_data)
        database.add_sold_item_data(sale_id, items_data)
        purchase_data['sale_id'] = sale_id

        user_text = get_buy_message(purchase_data, True)
        admin_text = get_buy_message(purchase_data, False)

        item_text = ""
        item_files = []

        item_size = len(items_data)
        for item in items_data:
            item_data = item[2].split("=", 2)

            if item_data[0] == "text":
                # —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä
                item_text += f"{item_data[1]}\n"
            elif item_data[0] == "file":
                # —Ñ–∞–π–ª–æ–≤—ã–π —Ç–æ–≤–∞—Ä
                item_files.append(item_data[1])

        for i in range(len(item_files)):
            # –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
            await message.answer_document(item_files[i])
            await send_admins_doc(item_files[i])

        if item_size > 10:
            # –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∞–π–ª–∞ —á–µ–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
            await generate_cheque(message, purchase_data['cheque'], item_text, user_text, admin_text)
        else:
            await message.answer(user_text + item_text)
            await send_admins(admin_text + item_text)

        if data['payment'] == "balance":
            user_balance = float(user_info[4]) - amount
            database.set_user_balance(message.chat.id, round(user_balance, 2))

        # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        database.update_user(message.chat.id, message.chat.username,
                             message.chat.first_name, message.chat.last_name)

        # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—É
        if user_info[5] != 0:
            percent = float(amount * (float(database.get_param("referral_percent")) / 100))
            balance = database.get_user_balance(user_info[5]) + percent
            database.set_user_balance(user_info[5], round(balance, 2))

            await bot.send_message(user_info[5], f"üßë –ü–æ–∫—É–ø–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ {get_user_link(message.chat.id)}\n\n"
                                                 f"–ü—Ä–æ—Ü–µ–Ω—Ç —Å –ø–æ–∫—É–ø–∫–∏: <b>{percent} —Ä—É–±.</b>\n"
                                                 f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <b>{balance} —Ä—É–±.</b>")
    else:
        # –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ
        if data['payment'] == "banker":
            user = database.get_user(message.chat.id)
            user_balance = float(database.get_user_balance(user[0])) + float(amount)
            database.set_user_balance(user[0], round(user_balance, 2))

            await message.answer("‚ùóÔ∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–ø–ª–∞—Ç—ã\n"
                                 "–î–µ–Ω—å–≥–∏ –±—ã–ª–∏ –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å\n\n"
                                 f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <b>{database.get_user_balance(user[0])} —Ä—É–±.</b>")
        elif data['payment'] == "balance":
            await message.answer("‚ùóÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ ‚ùóÔ∏è\n"
                                 "–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
            await message.delete()
            state = Dispatcher.get_current().current_state()
            await state.finish()
        else:
            await message.answer("‚ùóÔ∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–ø–ª–∞—Ç—ã ‚ùóÔ∏è\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ–ø–ª–∞—Ç—É –µ—â–µ —Ä–∞–∑")


async def generate_cheque(message, cheque, items, user_text, admin_text):
    config.create_folder("cheques")

    with open(f"{DIR}/cheques/{cheque}.txt", "w") as f:
        f.write(items)
        f.close()

    with open(f"{DIR}/cheques/{cheque}.txt", "rb") as f:
        await message.answer_document(document=f, caption=user_text)

    await send_admins(admin_text, document=f"cheques/{cheque}.txt")
