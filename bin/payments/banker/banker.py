import os.path

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from telethon import TelegramClient

import database
from loader import dp
from src.const import is_const, const_ru


class Client:
    client = TelegramClient("1", "1", "1")


class BankerEditor(StatesGroup):
    api_id = State()
    api_hash = State()

    phone = State()
    code = State()

    session_file = State()


async def banker_id(message: types.Message):
    """
    –ó–∞–ø—Ä–æ—Å api_id –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

    :param message:
    :return:
    """
    await message.answer("üì± –í–≤–µ–¥–∏—Ç–µ <b>api_id</b>\n\n"
                         "–ï–≥–æ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å <a href='https://my.telegram.org/apps'>–∑–¥–µ—Å—å</a>")
    await BankerEditor.api_id.set()


@dp.message_handler(state=BankerEditor.api_id)
async def banker_hash(message: types.Message, state: FSMContext):
    """
    –ó–∞–ø—Ä–æ—Å api_hash

    :param message:
    :param state:
    :return:
    """
    api_id = message.text
    if is_const(api_id) and not api_id.isdigit():
        await message.answer(const_ru['invalid_value'])
        return

    await state.update_data(api_id=int(api_id))
    await BankerEditor.next()
    await message.answer("üì± –í–≤–µ–¥–∏—Ç–µ <b>api_hash</b> –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")


@dp.message_handler(state=BankerEditor.api_hash)
async def session_file(message: types.Message, state: FSMContext):
    """
    –ó–∞–ø—Ä–æ—Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞

    :param message:
    :param state:
    :return:
    """
    api_hash = message.text
    if is_const(api_hash):
        await message.answer(const_ru['invalid_value'])
        return

    await state.update_data(api_hash=api_hash)

    data = await state.get_data()
    if os.path.exists("bot.session"):
        os.remove("bot.session")

    Client.client = TelegramClient('bot', data['api_id'], data['api_hash'])
    await Client.client.connect()

    if not await Client.client.is_user_authorized():
        await message.answer("üì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Å–¥–µ–ª–∞–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–Ω–µ–µ\n\n"
                             "–≠—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ–∫–æ–≤")
        await BankerEditor.next()
    else:
        await message.answer("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
        await state.finish()


@dp.message_handler(state=BankerEditor.phone)
async def password(message: types.Message, state: FSMContext):
    """
    –ó–∞–ø—Ä–æ—Å –ø–∞—Ä–æ–ª—è

    :param message:
    :param state:
    :return:
    """
    phone = message.text
    if is_const(phone) or not phone.isdigit():
        await message.answer("‚ùóÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
        return

    await state.update_data(phone=phone)

    phone_code = await Client.client.send_code_request(phone)
    await state.update_data(phone_code_hash=phone_code.phone_code_hash)

    await message.answer("üì± –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π Telegram\n"
                         "‚ùóÔ∏è –ü–µ—Ä–µ–¥ –∫–æ–¥–æ–º –¥–æ–±–∞–≤—å—Ç–µ –ª—é–±—É—é –±—É–∫–≤—É, –∏–Ω–∞—á–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–¥–æ–º –Ω–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è\n"
                         "–≠—Ç–æ —É–∂–µ –ø—Ä–æ–±–ª–µ–º—ã –±–∏–±–ª–∏–æ—Ç–µ–∫–∏, –∞ –Ω–µ –±–æ—Ç–∞")
    await BankerEditor.next()


@dp.message_handler(state=BankerEditor.code)
async def get_pass(message: types.Message, state: FSMContext):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞

    :param message:
    :param state:
    :return:
    """
    code = f"a{message.text}"
    if is_const(code):
        await message.answer("‚ùóÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–¥")
        return

    await state.update_data(code=code)
    await auth(message, state)


async def auth(message: types.Message, state: FSMContext):
    """
    –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è

    :param message:
    :param state:
    :return:
    """
    auth_data = await state.get_data()

    await Client.client.sign_in(phone=auth_data['phone'],
                                code=auth_data['code'],
                                phone_code_hash=auth_data['phone_code_hash'])

    client_data = await Client.client.get_me()

    if client_data is not None:
        await Client.client.disconnect()

        database.edit_banker(auth_data)
        await message.answer("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
        await state.finish()
    else:
        await message.answer("‚ùóÔ∏è –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ ‚ùóÔ∏è")
        await state.finish()
