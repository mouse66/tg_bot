from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State

import database
from loader import dp
from bin.payments.qiwi.qiwi_params import check_qiwi, get_nickname
from src.const import is_const, const_ru
from bin.keyboards import cancel_keyboard, finish_keyboard


class QiwiEditor(StatesGroup):
    num = State()
    token = State()


async def qiwi_num(message: types.Message):
    """
    –ó–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ Qiwi

    :param message:
    :return:
    """
    await message.answer("üì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ <b>–±–µ–∑ +</b>", reply_markup=cancel_keyboard)
    await QiwiEditor.num.set()


@dp.message_handler(state=QiwiEditor.num)
async def qiwi_token(message: types.Message, state: FSMContext):
    """
    –ó–∞–ø—Ä–æ—Å —Ç–æ–∫–µ–Ω–∞

    :param message:
    :param state:
    :return:
    """
    if not message.text.isdigit():
        await message.answer(const_ru['invalid_value'])
        return

    await state.update_data(num=message.text)
    await QiwiEditor.next()
    await message.answer("üìü –í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω Qiwi\n"
                         "–ï–≥–æ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å <a href='https://qiwi.com/api'>–∑–¥–µ—Å—å</a>")


@dp.message_handler(state=QiwiEditor.token)
async def check_token(message: types.Message, state: FSMContext):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞

    :param message:
    :param state:
    :return:
    """
    token = message.text
    if is_const(token):
        await message.answer("‚ùóÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω ‚ùóÔ∏è")
        return

    data = await state.get_data()

    if check_qiwi(data['num'], token):
        await message.answer("‚úÖ –ö–æ—à–µ–ª–µ–∫ –∞–∫—Ç–∏–≤–µ–Ω")
        await state.update_data(token=token)

        await check_nickname(message, state)

    else:
        await message.answer("‚ùóÔ∏è –ö–æ—à–µ–ª–µ–∫ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–Ω–æ–≤–∞ ‚ùóÔ∏è")
        await state.finish()
        return


async def check_nickname(message: types.Message, state: FSMContext):
    """
    –ó–∞–ø—Ä–æ—Å –Ω–∏–∫–Ω–µ–π–º–∞ –∏–∑ Qiwi
    –ó–∞–ø–∏—Å—å –∫–æ—à–µ–ª—å–∫–∞ –≤ –ë–î

    :param message:
    :param state:
    :return:
    """
    data = await state.get_data()

    response_data = get_nickname(data['num'], data['token'])
    await message.answer(f"üèß –í–∞—à –Ω–∏–∫–Ω–µ–π–º –∫–æ—à–µ–ª—å–∫–∞: <b>{response_data['nickname']}</b>")
    await state.update_data(nickname=str(response_data['nickname']))
    await state.update_data(type="number")

    data = await state.get_data()
    await state.finish()

    database.add_qiwi(data)
    await message.answer("‚úÖ –ö–æ—à–µ–ª–µ–∫ –¥–æ–±–∞–≤–ª–µ–Ω", reply_markup=finish_keyboard(message.chat.id))
